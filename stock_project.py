# -*- coding: utf-8 -*-
"""STOCK PROJECT

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mCV97IXPt5stSCpkvkdAsYC37AKRXAw2
"""

# Description: This program creates interactive candlesticks from the CSV file that is uploaded
import plotly.graph_objects as go # plotting library 
# Graph Objects - interactive charts 
import pandas as pd # pandas - data analysis library 
import numpy as np # arrays 
import matplotlib.pyplot as plt # visualizations
plt.style.use('fivethirtyeight') # style of graph for plotting

from google.colab import files # upload the files 
uploaded = files.upload() # returns uploaded files

tesla = pd.read_csv('TSLA.csv') # reads the csv file 
# CSV - tabular format 
tesla = tesla.set_index(pd.DatetimeIndex(tesla['Date'].values)) # sets time stamp  
tesla # prints dataframe

candlesticks = go.Figure( # creates the figure 
    data = [ # enter the data
            go.Candlestick( # candlestick chart 
                x = tesla.index, # tesla index
                low = tesla['Low'], # low price data 
                high = tesla['High'], # high price data 
                close = tesla['Close'], # close price data 
                open = tesla['Open'], # open price data 
                increasing_line_color = 'red', # create red boxes 
                decreasing_line_color = 'green' # create green boxes 
            )
    ]
)
candlesticks.show() # show the figure

# Description: Use 3 exponential moving averages (EMA) of various lengths. Generate Buy and Sell signals using these 3 EMAs.
# exponential weighted mean 
fast = tesla.Close.ewm(span=5,adjust=False).mean() 
medium = tesla.Close.ewm(span=21,adjust=False).mean()
slow = tesla.Close.ewm(span=63,adjust=False).mean()

# adds the three EMAs into the data frame of tesla 
tesla['Fast/Short'] = fast
tesla['Medium'] = medium
tesla['Slow/Long'] = slow

def three_moving_averages(data): # buying and selling function 
  buy_list = [] # empty
  sell_list = [] # empty 
  flag_long = False # set False 
  flag_short = False # set False 
  for i in range(0,len(data)): # for the range of data from start to finish 
    if data['Medium'][i] < data['Slow/Long'][i] and data['Fast/Short'][i] < data['Medium'][i] and flag_long==False and flag_short==False: 
      # if the Medium EMA is less than the Long EMA and Short EMA is less than Medium EMA and both flags are False then:
      buy_list.append(data['Close'][i]) # add to Buy signal 
      sell_list.append(np.nan) # nothing added 
      flag_short=True # flag short is True 
    elif flag_short==True and data['Fast/Short'][i] > data['Medium'][i]:
      # if the flag short is True and the Short EMA is greater than Medium EMA then:
      sell_list.append(data['Close'][i]) # add to the Sell signal 
      buy_list.append(np.nan) # nothing added 
      flag_short=False # flag short is False 
    elif data['Medium'][i] > data['Slow/Long'][i] and data['Fast/Short'][i] > data['Medium'][i] and flag_long==False and flag_short==False:
      # if Medium EMA is greater than Long EMA and Short EMA is greater than Medium EMA and flags are both False 
      buy_list.append(data['Close'][i]) # add to the Buy signal 
      sell_list.append(np.nan) # nothing added 
      flag_long=True # flag long is true 
    elif flag_long==True and data['Fast/Short'][i] < data['Medium'][i]: # if flag long is True and Short EMA is less than Medium EMA then:
      sell_list.append(data['Close'][i]) # add to the sell signal 
      buy_list.append(np.nan) # nothing added 
      flag_long=False # flag long is false 
    else: 
      buy_list.append(np.nan) # nothing added 
      sell_list.append(np.nan) # nothing added 
  return (buy_list, sell_list) # return the signals

tesla['Buy'] = three_moving_averages(tesla)[0] # adds Buy into the dataframe 
tesla['Sell'] = three_moving_averages(tesla)[1] # adds Sell into the dataframe

plt.figure(figsize=(20,7)) # plots figure size 
plt.title('3 Moving Averages-Trading Strategy Chart of Tesla Stock (TSLA)', fontsize=20) # plots title 
plt.plot(tesla['Close'],label='Close Price ($)',color='blue',alpha=0.35) # plots Closing Price 
plt.plot(fast, label='Short EMA', color='red',alpha=0.35) # plots short EMA
plt.plot(medium, label='Medium EMA',color='orange',alpha=0.35) # plots Medium EMA
plt.plot(slow, label='Long EMA', color='green',alpha=0.35) # plots Long EMA 
plt.scatter(tesla.index, tesla['Buy'], color='green', marker='^', alpha=1) # plots Buy signals 
plt.scatter(tesla.index, tesla['Sell'], color='red', marker='v', alpha=1) # plots Sell signals 
plt.xlabel('Date',fontsize=20) # plots x label (horizontal)
plt.ylabel('Close Price ($)',fontsize=18) # plots y label (vertical)
plt.show() # shows graph
